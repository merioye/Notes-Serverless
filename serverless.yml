service: notes-api
frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs16.x
  versionFunctions: false
  stage: ${opt:stage, 'dev'}
  httpApi:
    authorizers:
      lambdaAuthorizer:
        type: request
        functionName: authorizer
  environment:
    NOTES_TABLE_NAME: !Ref notesTable

functions:
  authorizer:
    handler: src/authorizer.handler
    memorySize: 128
    timeout: 5
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_USERPOOL_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient
  createNote:
    handler: src/handler.createNote
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          path: /notes
          method: post
          authorizer:
            name: lambdaAuthorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
  getAllNotes:
    handler: src/handler.getAllNotes
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          path: /notes
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
  updateNote:
    handler: src/handler.updateNote
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          path: /notes/{id}
          method: put
          authorizer:
            name: lambdaAuthorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
  deleteNote:
    handler: src/handler.deleteNote
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          path: /notes/{id}
          method: delete
          authorizer:
            name: lambdaAuthorizer
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
  getNote:
    handler: src/handler.getNote
    memorySize: 128
    timeout: 5
    events:
      - httpApi:
          path: /notes/{id}
          method: get
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt notesTable.Arn

resources:
  Resources: ${file(resources.yml)}

plugins:
  - serverless-offline
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript
